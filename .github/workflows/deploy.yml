name: Deploy to Production

on:
  push:
    branches: ['main']
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'LICENSE'

env:
  IMAGE_NAME: docker-registry.baobo.me/gengar-bark
  NODE_VERSION: '18'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: latest
          platforms: linux/amd64
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Generate version tag
        id: tag
        run: |
          SHA_SHORT=$(git rev-parse --short HEAD)
          TS=$(date +%Y%m%d%H%M)
          echo "VERSION=${TS}-${SHA_SHORT}" >> $GITHUB_OUTPUT

      - name: Create env file
        shell: bash
        env:
          ENV_CONTENT: ${{ secrets.ENV_PROD }}
        run: |
          echo "$ENV_CONTENT" > .env

      - name: Optimize build context
        run: |
          # 创建简化版的 .dockerignore
          cat > .dockerignore <<EOF
          .git
          .github
          .next
          node_modules
          npm-debug.log
          README.md
          .gitignore
          .env.example
          tests
          coverage
          EOF

      - name: Login to Registry
        uses: docker/login-action@v2
        with:
          registry: docker-registry.baobo.me
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Set up Docker layer caching
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.VERSION }}
          cache-to: |
            type=local,dest=/tmp/.buildx-cache-new,mode=max
            type=registry,ref=${{ env.IMAGE_NAME }}:buildcache,mode=max,compression=true,compression-level=5
          # 添加缓存过滤
          cache-from: |
            type=local,src=/tmp/.buildx-cache
            type=registry,ref=${{ env.IMAGE_NAME }}:buildcache,filter=.*:none
          build-args: |
            NODE_ENV=production
            BUILDKIT_INLINE_CACHE=1
          target: production
          platforms: linux/amd64
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.revision=${{ github.sha }}
          outputs: type=registry,compression=zstd,compression-level=5,force-compression=true

      # 临时缓存处理
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Check image size
        run: |
          docker pull ${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.VERSION }}
          IMAGE_SIZE=$(docker image inspect ${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.VERSION }} --format='{{.Size}}')
          echo "Image size: $(echo "scale=2; $IMAGE_SIZE/1024/1024" | bc) MB"

      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.HOST_USERNAME }}
          key: ${{ secrets.HOST_SSHKEY }}
          script: |
            # 创建应用目录
            mkdir -p /app/gengar-bark
            cd /app/gengar-bark
            
            # 生成 docker-compose 配置
            cat > docker-compose.yml <<EOF
            version: '3.8'
            services:
              app:
                image: ${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.VERSION }}
                container_name: gengar-bark
                ports:
                  - "3001:3000"
                restart: unless-stopped
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
                  start_period: 40s
                deploy:
                  resources:
                    limits:
                      memory: 1G
                    reservations:
                      memory: 512M
                logging:
                  driver: "json-file"
                  options:
                    max-size: "50m"
                    max-file: "3"
                labels:
                  deployment.version: ${{ steps.tag.outputs.VERSION }}
                  deployment.timestamp: "$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
            EOF
            
            # 拉取新镜像并部署
            docker compose pull
            docker compose up -d
            
            # 等待服务健康检查通过
            timeout 60s bash -c 'until docker compose ps | grep -q "(healthy)"; do sleep 2; done'
            
            # 清理旧镜像和缓存
            docker system prune -af --filter "until=24h"
            
            # 验证部署
            if ! curl -f http://localhost:3001/health; then
              echo "Health check failed"
              docker compose logs --tail 100
              exit 1
            fi

      - name: Verify Deployment
        if: success()
        run: |
          echo "✅ Deployment successful"
          echo "Version: ${{ steps.tag.outputs.VERSION }}"
          echo "Deployed at: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"

      - name: Notify on Failure
        if: failure()
        run: |
          echo "❌ Deployment failed"
          echo "Please check the logs for more details"

      - name: Clean up
        if: always()
        run: |
          docker builder prune -f
          docker image prune -f
